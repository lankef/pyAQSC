/* Operators*/
prefix("dpsi");
"dpsi"(a) := diff(a, eps)/(2*eps);

prefix("dphi");
"dphi"(a) := diff(a, phi);

prefix("dchi");
"dchi"(a) := diff(a, chi);

/* An anti-derivative operator */
prefix("ichi");
"ichi"(a) := int_chi(a);


prefix("dphi_iota_dchi");
"dphi_iota_dchi"(a) := ((dphi a) + iota_e * (dchi a));


trigreduce_intosum(expr):= trigreduce(intosum(expr));

/* Generating a power series of form

       inf
      ====
      \                   i
        >   coeff_name eps
      /               i
      ====
      i = 0

    where j is even or odd indices depending on i.
    Use 'fourier_series[i](coeff_sin_name, coeff_cos_name, chi) as coeff_name to
    generate Fourier-asymptotic fourier_series

*/
power_series(coeff_name, eps):=sum(coeff_name[i]*eps^i, i, 0, inf);

/* Generating a skip power series of form

       inf
      ====
      \                   2i
        >   coeff_name eps
      /               i
      ====
      i = 0

    where j is even or odd indices depending on i.
    Use 'fourier_series[i](coeff_sin_name, coeff_cos_name, chi) as coeff_name to
    generate Fourier-asymptotic fourier_series

*/
skip_power_series(coeff_name, eps):=sum(coeff_name[i]*eps^(2*i), i, 0, inf);

/* Generating a fourier series with only even/odd modes of form
        i
      ====
      \
        >    coeff_sin_name[i,j] sin(i*chi) + coeff_cos_name[i,j] cos(i*chi)
      /
      ====
      j = 0|1
*/
skip_fourier_series[i](coeff_sin_name, coeff_cos_name, chi):=
    sum(is_both_even_odd(i,j)*(coeff_sin_name[i,j]*sin(j*chi) + coeff_cos_name[i,j]*cos(j*chi)), j, 0, i);

/* Generating a series of form

       inf            n
      ====          ====
      \         n   \
        >    eps      >    coeff_sin_name[i,j] sin(i*chi) + coeff_cos_name[i,j] cos(i*chi)
      /             /
      ====          ====
      i = 0        j = 0|1

    where j is even or odd indices depending on i */

fourier_asympt_series(coeff_sin_name, coeff_cos_name, eps, chi):=
block([fourier],
    return(
        sum(
            sum(
                is_both_even_odd(i,j)*(coeff_sin_name[i,j]*sin(j*chi) + coeff_cos_name[i,j]*cos(j*chi))
            , j, 0, i
            )*eps^i, i, 0, inf
        )
    )
);



/* Naming convention
   Each series will be named as:
   <var>_<dependence>= <var>_coef[0] + <var>_coef[1] * eps + ...
   in <dependence>, epsilon, chi, phi are written as e, c, p.
   For example, X(epsilon, chi, phi) will be named X_ecp.
   NOTE: <var>_coef must be an ARRAY. Matrix coef in maxima starts at 1.
   It's super confusing and might cause errors. They also must be FUNCTIONS, since
   differential won't work otherwise.
   For now, partial derivative wrt phi and chi are done by defining new variables.*/
   /* This portion defines variable used in epsilon order matching */

/* Initial condition phi dependence */
depends([tau_p, kap_p], [phi]);
depends([
    X_coef_cp,
    Y_coef_cp,
    Z_coef_cp
    ], [phi, chi]);
depends([
    B_psi_coef_cp,
    B_theta_coef_cp
    ], [phi, chi]);
depends([
    p_perp_coef_cp,
    Delta_coef_cp
    ], [phi, chi]);
depends([B_alpha_coef_c, B_denom_coef_c], [chi]);

p_perp_ecp: power_series(p_perp_coef_cp, eps);
Delta_ecp: power_series(Delta_coef_cp, eps);



/* Flux functions */
B_alpha_e: sum(B_alpha_coef[i]*eps^(2*i), i, 0, inf);
iota_e: sum(iota_coef[i]*eps^(2*i), i, 0, inf);

/* Flux Chi functions */
B_denom_ec: power_series(B_denom_coef_c, eps);

X_coef_cp[0]: 0;
Y_coef_cp[0]: 0;
Z_coef_cp[0]: 0;
Z_coef_cp[1]: 0;
B_theta_coef_cp[0]:0;
B_theta_coef_cp[1]:0;

/* Flux Chi functions with phi-dependent coefs */
X_ecp: power_series(X_coef_cp, eps);
Y_ecp: power_series(Y_coef_cp, eps);
Z_ecp: power_series(Z_coef_cp, eps);
B_psi_ecp: power_series(B_psi_coef_cp, eps);
B_theta_ecp: power_series(B_theta_coef_cp, eps);


J_ec: B_alpha_e * B_denom_ec;

/* For evaluating the first few orders of near axis expansion equations. Can be modified */
evaluate(expr, n_in):= block(
    [out],
    out:ev(
        expr,
        n: n_in,
        simpsum: true,
        /* 1 if a number is even or odd. Assume integer.
         Will be left as is until evaluation*/
        is_integer(expr) :=(
            if integerp(expr) then 1
            else 0
        ),
        is_seq(a,b) :=(
            if a<=b then 1
            else 0
        ),
        /*
            Note: do not use the operator trick by replacing x_coef_cp as or introducing
            X_coef_cp[n]:=(if n=n_in then X_coef_cp_N[n] else 0) ,
            X_coef_cp_cond[n]:=(if n=n_in then X_coef_cp_N[n] else 0) ,
            since:
            1. opsubst doesn't work well with memoizing function(f[a])
            2. memoizing function stores value and does not automatically
            clear out those values even if the definition is changed.
        */
        nouns
    ),
    return(remove_const_diff(out))
);


/* Inspecting the coefficient of n+offset-th order var in expr in order n
    by evaluating from n=1 to n=max_order*/
find_var_n_offset_in_expr(expr, var, offset, min_order, max_order):=block(
    [
        ev_result,
        n_desired
    ],
    /* Finding Yn+1 in LHS */
    for n_in:min_order thru max_order do(
        n_desired: n_in+offset,
        ev_result: evaluate(expr, n_in),
        /* Removing lower orders of Y */
        ev_result: expandwrt(ev_result, var[n_desired]),
        disp(""),
        disp(""),
        disp(""),
        disp(sconcat("========================== Order ", n_in, " coeff finding for =========================")),
        disp(var[n_desired]),
        /* By definition, Y_coef can only appear as itself, its phi or chi derivative */
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for      ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, var[n_desired])),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dchi ", var[n_desired], " is:" )),
        disp(ratcoef(ev_result, 'diff(var[n_desired],chi,1))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dphi ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],phi,1))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dchi dphi ", var[n_desired], " is:" )),
        disp(ratcoef(ev_result, 'diff(var[n_desired],chi,1,phi,1))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dphi^2 ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],phi,2))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dchi^2 ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],chi,2))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dphi^3 ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],phi,3))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dchi^2 dphi ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],chi,2,phi,1))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dphi^2 dchi ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],chi,1,phi,2))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dchi^3 ", var[n_desired], " is:")),
        disp(ratcoef(ev_result, 'diff(var[n_desired],chi,3)))
    )
)$

find_var_nm_offset_in_expr(expr, var, offset, min_order, max_order, m):=block(
    [
        ev_result,
        n_desired
    ],
    /* Finding Yn+1 in LHS */
    for n_in:min_order thru max_order do(
        n_desired: n_in+offset,
        ev_result: evaluate(expr, n_in),
        /* Removing lower orders of Y */
        ev_result: expandwrt(ev_result, var[n_desired,m]),
        disp(""),
        disp(""),
        disp(""),
        disp(sconcat("========================== Order ", n_in, " coeff finding for =========================")),
        disp(var[n_desired,m]),
        /* By definition, Y_coef can only appear as itself, its phi or chi derivative */
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for      ", var[n_desired,m], " is:")),
        disp(ratsimp(ratcoef(ev_result, var[n_desired,m]))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dchi ", var[n_desired,m], " is:" )),
        disp(ratsimp(ratcoef(ev_result, 'diff(var[n_desired,m],chi,1)))),
        disp(sconcat("@@@@@@@@@@@@@@@@@@@@@@@@@@ Coeff for dphi ", var[n_desired,m], " is:")),
        disp(ratsimp(ratcoef(ev_result, 'diff(var[n_desired,m],phi,1))))
    )
)$


A_alpha_ecp: (dphi_iota_dchi B_theta_ecp);
A_psi_ecp: (dpsi B_alpha_e) - (dphi_iota_dchi B_psi_ecp) - B_theta_ecp * dpsi iota_e;

/* Defining LHS */
jacobian_lhs_ec:ratsimp( B_alpha_e^2 * B_denom_ec)$
/* Defining RHS */
jacobian_rhs_ecp:
      ratsimp((iota_e*dchi X_ecp + dphi (X_ecp) +tau_p*Y_ecp*dl_p + kap_p*Z_ecp*dl_p)^2
       +(iota_e*dchi (Y_ecp) + dphi (Y_ecp) -tau_p*X_ecp*dl_p)^2
       +(iota_e*dchi (Z_ecp) + dphi (Z_ecp) -kap_p*X_ecp*dl_p + dl_p)^2)$

/* Co/contravariant equations */
b0_lhs_ecp: ratsimp(-(B_alpha_e - iota_e*B_theta_ecp)*((dchi X_ecp)*(dpsi Y_ecp) - (dpsi X_ecp)*(dchi Y_ecp))
            -B_psi_ecp*(
                (dchi Y_ecp)*((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p)
                -(dchi X_ecp)*((dphi Y_ecp) - X_ecp*tau_p*dl_p)
            )
            +B_theta_ecp*(
                (dpsi Y_ecp)*((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p)
                -(dpsi X_ecp)*((dphi Y_ecp) - X_ecp*tau_p*dl_p)
            ))$
b0_rhs_ecp: ratsimp((dphi Z_ecp) - X_ecp*kap_p*dl_p + dl_p + iota_e*(dchi Z_ecp))$

k0_lhs_ecp: ratsimp(-(B_alpha_e - iota_e*B_theta_ecp)*((dchi Y_ecp)*(dpsi Z_ecp) - (dpsi Y_ecp)*(dchi Z_ecp))
            -B_psi_ecp*(
                (dchi Z_ecp)*((dphi Y_ecp) - tau_p*X_ecp*dl_p)
                -(dchi Y_ecp)*((dphi Z_ecp) - X_ecp*kap_p*dl_p + dl_p)
            )
            +B_theta_ecp*(
                (dpsi Z_ecp)*((dphi Y_ecp) - tau_p*X_ecp*dl_p)
                -(dpsi Y_ecp)*((dphi Z_ecp) - X_ecp*kap_p*dl_p + dl_p)
            ))$
k0_rhs_ecp: ratsimp((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p + iota_e*(dchi X_ecp))$

t0_lhs_ecp: ratsimp(-(B_alpha_e - iota_e*B_theta_ecp)*((dchi Z_ecp)*(dpsi X_ecp) - (dpsi Z_ecp)*(dchi X_ecp))
            -B_psi_ecp*(
                (dchi X_ecp)*((dphi Z_ecp) - X_ecp*kap_p*dl_p + dl_p)
                -(dchi Z_ecp)*((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p)
            )
            +B_theta_ecp*(
                (dpsi X_ecp)*((dphi Z_ecp) - X_ecp*kap_p*dl_p + dl_p)
                -(dpsi Z_ecp)*((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p)
            ))$
t0_rhs_ecp: ratsimp((dphi Y_ecp) - tau_p*X_ecp*dl_p + iota_e*(dchi Y_ecp))$

/* Another form of the co/contravariant equations */
D2_lhs_ecp: J_ec * B_psi_ecp$
D2_rhs_ecp:
    intosum(dpsi X_ecp)*((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p + iota_e*(dchi X_ecp))
    + intosum(dpsi Y_ecp)*((dphi Y_ecp) - tau_p*X_ecp*dl_p + iota_e*(dchi Y_ecp))
    + intosum(dpsi Z_ecp)*((dphi Z_ecp) - kap_p*X_ecp*dl_p + dl_p + iota_e*(dchi Z_ecp))$

D3_lhs_ecp: J_ec * B_theta_ecp$
D3_rhs_ecp:
    (dchi X_ecp)*((dphi X_ecp) + tau_p*Y_ecp*dl_p + Z_ecp*kap_p*dl_p + iota_e*(dchi X_ecp))
    + (dchi Y_ecp)*((dphi Y_ecp) - tau_p*X_ecp*dl_p + iota_e*(dchi Y_ecp))
    + (dchi Z_ecp)*((dphi Z_ecp) - kap_p*X_ecp*dl_p + dl_p + iota_e*(dchi Z_ecp))$

/* MHD equations */
/* Equation 1: */
I_lhs_ecp: B_denom_ec * (dphi_iota_dchi Delta_ecp)
    + B_denom_ec^2 * (dphi_iota_dchi p_perp_ecp)$
I_rhs_ecp: iota_e/2 * Delta_ecp * (dchi B_denom_ec)$

/* Equation 2 */
II_lhs_ecp: A_alpha_ecp * (1-Delta_ecp) * B_denom_ec$
II_rhs_ecp: -B_theta_ecp * B_denom_ec^2 * (dphi p_perp_ecp)
    + B_denom_ec^2 * (B_alpha_e - iota_e*B_theta_ecp) * (dchi p_perp_ecp)
    - 1/2 * (B_alpha_e - iota_e*B_theta_ecp) * Delta_ecp * (dchi B_denom_ec)$

/* Equation 3 */
III_lhs_ecp: B_denom_ec * (
        A_psi_ecp*(1-Delta_ecp)
        + B_psi_ecp*(dphi_iota_dchi Delta_ecp)
    )
    - 1/2 * B_alpha_e * Delta_ecp * (dpsi B_denom_ec)
    + B_denom_ec * J_ec * (dpsi p_perp_ecp)$
/* RHS is 0*/

/* Another form of equation 3 */
E6_lhs_ecp: B_alpha_e * B_denom_ec^2 * (dpsi p_perp_ecp)$
E6_rhs_ecp: (dphi_iota_dchi (B_psi_ecp * (1-Delta_ecp))) * B_denom_ec
    + (Delta_ecp-1) * (dpsi B_alpha_e - (dpsi iota_e)*B_theta_ecp) * B_denom_ec
    + 1/2 * B_alpha_e * Delta_ecp * (dpsi B_denom_ec)$

matchdeclare(any_a, true);

remove_const_diff(expr):= block([out:expr],
    out: subst(0, diff(B_denom_coef_c[0],chi,1), out),
    out: subst(0, diff(B_denom_coef_c[0],chi,2), out),
    out: subst(0, diff(Delta_coef_cp[0],chi,1), out),
    out: subst(0, diff(Delta_coef_cp[0],chi,2), out),
    out: subst(0, diff(p_perp_coef_cp[0],chi,1), out),
    out: subst(0, diff(p_perp_coef_cp[0],chi,2), out),
    out: subst(0, diff(Delta_coef_cp[0],chi, 1, phi, 1), out),
    out: subst(0, diff(Delta_coef_cp[0],chi, 2, phi, 1), out),
    out: subst(0, diff(Delta_coef_cp[0],chi, 1, phi, 2), out),
    out: subst(0, diff(p_perp_coef_cp[0],chi, 1, phi, 1), out),
    ratsimp(out)
);
